axis.title.x = if (show_x) element_text(size = 12) else element_blank(),
strip.text = element_text(size = 14, face = "bold", family = "serif"),
plot.margin = margin(2, 2, 2, 2)
) +
scale_color_manual(values = c("#7F3B08", "#FEE0B6", "#FDB863", "#E08214")) +
scale_y_continuous(limits = c(24, 26.5), breaks = seq(24, 26.5, by = 0.5)) +
#labs(y = if (show_y) "Temperature\nfixed effects (°C·yr⁻¹)" else NULL) +
labs(x = "Fractional cover (%)",
y = if (show_y) expression(bold(atop("Temperature", "fixed effects (°C)"))) else NULL)
return(p)
}
# Atualizar ordem dos fatores e renomear os labels
all_contrasts <- all_contrasts %>%
mutate(
tipo_sf = factor(tipo_sf, levels = c("SF_early", "SF_intermediate", "SF_advanced")),
tipo_sf_label = fct_recode(tipo_sf,
"SF early" = "SF_early",
"SF intermediate" = "SF_intermediate",
"SF advanced" = "SF_advanced")
)
# Criar coluna categórica para estimate
all_contrasts <- all_contrasts %>%
mutate(
estimate_cat = factor(
cut(estimate,
breaks = c(-Inf, -0.3, 0, Inf),
labels = c("<−0.3", "−0.3 to 0", ">0")
),
levels = c("<−0.3", "−0.3 to 0", ">0")
)
)
# Heatmap de contrastes
plot_heat_temp <- function(region_name, show_legend = FALSE, show_y_labels = TRUE) {
ggplot(filter(all_contrasts, region == region_name),
aes(x = ff_area, y = tipo_sf_label, fill = estimate_cat)) +
geom_tile(color = "white", height = 0.7) +
geom_text(aes(label = sig_label), size = 3, color = "black", family = "serif") +
scale_fill_manual(values = c("<−0.3" = "#4393C3", "−0.3 to 0" = "#92C5DE", ">0" = "#D6604D"),
limits = c("<−0.3", "−0.3 to 0", ">0"),
drop = FALSE,
name = bquote(bold(atop(Delta~"LST (PF−SF)", "(°C)")))
)+
ggthemes::theme_few() +
theme(
text = element_text(size = 12, face = "bold", family = "serif"),
axis.text.x = element_blank(),
axis.title = element_blank(),
axis.text.y = if (show_y_labels) element_text(size = 10, face = "plain", family = "serif", color = "black") else element_blank(),
legend.position = if (show_legend) "right" else "none",
legend.title = element_text(size = 10, face = "bold", family = "serif"),
legend.text = element_text(size = 10),
plot.title = element_text(hjust = 0.5, size = 14, face = "bold", family = "serif"),
strip.text = element_text(size = 14, face = "bold", family = "serif"),
plot.margin = margin(2, 2, 2, 2)
) +
labs(title = "")
}
# Combinar gráficos para cada região
panel_CBA_temp <- plot_heat_temp("CBA", show_legend = FALSE, show_y_labels = TRUE) /
plot_point_temp("CBA", show_y = TRUE, show_x = FALSE, show_legend = FALSE, show_y_axes = TRUE)
panel_CBA_temp <- panel_CBA_temp + plot_layout(heights = c(0.2, 0.8))
panel_EBA_temp <- plot_heat_temp("EBA", show_legend = FALSE, show_y_labels = FALSE) /
plot_point_temp("EBA", show_y = FALSE, show_x = TRUE,  show_legend = FALSE, show_y_axes = FALSE)
panel_EBA_temp <- panel_EBA_temp + plot_layout(heights = c(0.2, 0.8))
panel_SBA_temp <- plot_heat_temp("SBA", show_legend = TRUE, show_y_labels = FALSE) /
plot_point_temp("SBA", show_y = FALSE, show_x = FALSE, show_legend = TRUE, show_y_axes = FALSE)
panel_SBA_temp <- panel_SBA_temp + plot_layout(heights = c(0.2, 0.8))
# Combinar todos os painéis horizontalmente
final_panel_temp <- (panel_CBA_temp | panel_EBA_temp | panel_SBA_temp)
# Exibir painel final
final_panel_temp
# Salvar
ggsave("fig/fixed_fixed_temp.png",
plot = final_panel_temp,
bg = "white", dpi = 600, width = 9, height = 5.5)
gc()
p1_point_prec <- final_panel_prec +
scale_x_discrete(expand = c(0.05, 0.05)) +
theme(plot.margin = margin(t = 10, r = 20, b = 5, l = 30))
p1_point_evapo <- final_panel_evapo +
scale_x_discrete(expand = c(0.05, 0.05)) +
theme(plot.margin = margin(t = 5, r = 20, b = 5, l = 30))
p1_point_temp <- final_panel_temp +
scale_x_discrete(expand = c(0.05, 0.05)) +
theme(plot.margin = margin(t = 5, r = 20, b = 10, l = 30))
# Criar painel com espaçamento ajustado
painel_fixed <- ggarrange(
p1_point_prec, p1_point_evapo, p1_point_temp,
ncol = 1, nrow = 3,
labels = c("A", "B", "C"),  # Letras dos subplots
font.label = list(color = "black", face = "bold", size = 14, family = "serif"),
align = "v",                # Alinhamento vertical
heights = c(1, 1, 1)        # Força os plots a terem alturas iguais
)
library(lme4)
library(performance)
library(readxl)
library(tidyverse)
library(dplyr)
library(cowplot)
library(DHARMa)
library(writexl)
library(merTools)
library(lmtest)
library(patchwork)
library(emmeans)
library(stringr)
library(DescTools)
library(openxlsx)
p1_point_prec <- final_panel_prec +
scale_x_discrete(expand = c(0.05, 0.05)) +
theme(plot.margin = margin(t = 10, r = 20, b = 5, l = 30))
p1_point_evapo <- final_panel_evapo +
scale_x_discrete(expand = c(0.05, 0.05)) +
theme(plot.margin = margin(t = 5, r = 20, b = 5, l = 30))
p1_point_temp <- final_panel_temp +
scale_x_discrete(expand = c(0.05, 0.05)) +
theme(plot.margin = margin(t = 5, r = 20, b = 10, l = 30))
# Criar painel com espaçamento ajustado
painel_fixed <- ggarrange(
p1_point_prec, p1_point_evapo, p1_point_temp,
ncol = 1, nrow = 3,
labels = c("A", "B", "C"),  # Letras dos subplots
font.label = list(color = "black", face = "bold", size = 14, family = "serif"),
align = "v",                # Alinhamento vertical
heights = c(1, 1, 1)        # Força os plots a terem alturas iguais
)
library(ggplot2)
library(RColorBrewer)
library(writexl)
library(extrafont)
library(readxl)
library(tidyverse)
library(dplyr)
library(scales)
library(grid)
library(gridExtra)
library(gtable)
library(ggpubr)
library(car)
library(dunn.test)
library(data.table)
library(rstatix)
library(tidyr)
library(purrr)
library(patchwork)
library(reshape2)
library(ggthemes)
library(sf)
library(scales)
p1_point_prec <- final_panel_prec +
scale_x_discrete(expand = c(0.05, 0.05)) +
theme(plot.margin = margin(t = 10, r = 20, b = 5, l = 30))
p1_point_evapo <- final_panel_evapo +
scale_x_discrete(expand = c(0.05, 0.05)) +
theme(plot.margin = margin(t = 5, r = 20, b = 5, l = 30))
p1_point_temp <- final_panel_temp +
scale_x_discrete(expand = c(0.05, 0.05)) +
theme(plot.margin = margin(t = 5, r = 20, b = 10, l = 30))
# Criar painel com espaçamento ajustado
painel_fixed <- ggarrange(
p1_point_prec, p1_point_evapo, p1_point_temp,
ncol = 1, nrow = 3,
labels = c("A", "B", "C"),  # Letras dos subplots
font.label = list(color = "black", face = "bold", size = 14, family = "serif"),
align = "v",                # Alinhamento vertical
heights = c(1, 1, 1)        # Força os plots a terem alturas iguais
)
# Salvar figura final
ggsave("fig/painels/effect_fix_climate_x_fractional_forest.png",
plot = painel_fixed, dpi = 600, width = 10, height = 12, bg = "white")
ggsave("fig/painels/effect_fix_climate_x_fractional_forest.pdf",
plot = painel_fixed, width = 10, height = 12, bg = "white")
# Para cada modelo
em_cba <- emmeans(model_CBA_evapo, ~ ff_area | Tipo)
em_eba <- emmeans(model_EBA_evapo, ~ ff_area | Tipo)
em_sba <- emmeans(model_SBA_evapo, ~ ff_area | Tipo)
em_df_cba <- as.data.frame(emmeans(model_CBA_evapo, ~ ff_area * Tipo))
em_df_eba <- as.data.frame(emmeans(model_EBA_evapo, ~ ff_area * Tipo))
em_df_sba <- as.data.frame(emmeans(model_SBA_evapo, ~ ff_area * Tipo))
em_df_cba$region <- "CBA"
em_df_eba$region <- "EBA"
em_df_sba$region <- "SBA"
# Juntar todos
em_all <- bind_rows(em_df_cba, em_df_eba, em_df_sba)
# Salvar
write_xlsx(em_all, "data_group/fixed_effects_evapo.xlsx")
# Função para obter contrasts PF - SF para cada região
get_contrasts <- function(model, region_name) {
em <- emmeans(model, ~ ff_area:Tipo)
contrast_res <- contrast(em, method = "revpairwise", by = "ff_area", adjust = "fdr")
df <- as.data.frame(contrast_res)
df$region <- region_name
return(df)
}
# Obter contrastes para cada região
contrast_CBA_df <- get_contrasts(model_CBA_evapo, "CBA")
contrast_EBA_df <- get_contrasts(model_EBA_evapo, "EBA")
contrast_SBA_df <- get_contrasts(model_SBA_evapo, "SBA")
# Unir os dados
all_contrasts <- bind_rows(contrast_CBA_df, contrast_EBA_df, contrast_SBA_df)
# Manter apenas os contrastes entre PF e SF_* (não entre os SFs entre si)
sf_levels <- c("SF_early", "SF_intermediate", "SF_advanced")
all_contrasts <- all_contrasts %>%
filter((str_detect(contrast, "PF") & str_detect(contrast, "SF_")))
# Extrair variáveis
all_contrasts <- all_contrasts %>%
separate(contrast, into = c("tipo1", "tipo2"), sep = " - ") %>%
# Manter apenas os contrastes entre PF e SF (em qualquer ordem)
filter((tipo1 == "PF" & tipo2 %in% sf_levels) | (tipo2 == "PF" & tipo1 %in% sf_levels)) %>%
mutate(
ff_area = factor(ff_area, levels = unique(ff_area)),
tipo_sf = if_else(tipo1 == "PF", tipo2, tipo1),
tipo_sf = factor(tipo_sf, levels = sf_levels),
estimate = if_else(tipo1 == "PF", estimate, -estimate),  # garantir PF - SF
sig_label = ifelse(p.value < 0.05, "*", "")
)
# Garante que parâmetros estejam em ordem correta
all_contrasts$ff_area <- factor(all_contrasts$ff_area,
levels = c("1-10", "10-20", "20-30", "30-40", "40-50",
"50-60", "60-70", "70-80", "80-90", "90-100"))
# Ajusta ordem dos tipos de vegetação se necessário
all_contrasts$tipo_sf <- factor(all_contrasts$tipo_sf,
levels = c("SF_early", "SF_intermediate", "SF_advanced"))
# Salvar
write_xlsx(all_contrasts, "data_group/contrast_PF_SF_evapo.xlsx")
# Plot de pontos
plot_point_evapo <- function(region_name, show_y = TRUE, show_legend = FALSE, show_y_axes = TRUE) {
p <- ggplot(filter(em_all, region == region_name) %>%
mutate(
Tipo = factor(Tipo) %>%
fct_relevel("PF", "SF_early", "SF_intermediate", "SF_advanced") %>%
fct_recode(
"PF" = "PF",
"SF early" = "SF_early",
"SF intermediate" = "SF_intermediate",
"SF advanced" = "SF_advanced"
)
),
aes(x = ff_area, y = emmean, color = Tipo, group = Tipo)) +
geom_errorbar(aes(ymin = lower.CL, ymax = upper.CL),
position = position_dodge(width = 0.8), width = 0.6, size = 0.5) +
geom_point(position = position_dodge(width = 0.8), size = 1.5) +
ggthemes::theme_few() +
theme(
text = element_text(size = 12, face = "bold", family = "serif"),
legend.position = if (show_legend) "right" else "none",
legend.title = element_blank(),
legend.background = element_rect(fill = "transparent"),
legend.text = element_text(size = 10),
axis.text = element_text(size = 10, face = "plain", family = "serif", color = "black"),
axis.text.x = element_blank(),
#axis.text.x = element_text(size = 10, angle = 45, hjust = 1, vjust = 1),
axis.text.y = if (show_y_axes) element_text(size = 10) else element_blank(),
axis.title.y = if (show_y) element_text(size = 14, margin = margin(r = -20)) else element_blank(),
axis.title.x = element_blank(),
strip.text = element_text(size = 14, face = "bold", family = "serif"),
plot.margin = margin(2, 2, 2, 2)
) +
scale_color_manual(values = c("#02401B", "lightgreen", "green1", "green4")) +
scale_y_continuous(limits = c(1200, 1700), breaks = seq(1200, 1700, by = 100)) +
#labs(y = if (show_y) "Evapotranspiration\nfixed effects (mm·yr⁻¹)" else NULL) +
labs(y = if (show_y) expression(bold(atop("Evapotranspiration", "fixed effects (mm)"))) else NULL)
return(p)
}
# Atualizar ordem dos fatores e renomear os labels
all_contrasts <- all_contrasts %>%
mutate(
tipo_sf = factor(tipo_sf, levels = c("SF_early", "SF_intermediate", "SF_advanced")),
tipo_sf_label = fct_recode(tipo_sf,
"SF early" = "SF_early",
"SF intermediate" = "SF_intermediate",
"SF advanced" = "SF_advanced")
)
# Criar coluna categórica para estimate
all_contrasts <- all_contrasts %>%
mutate(
estimate_cat = factor(
cut(estimate,
breaks = c(-Inf, -30, 0, Inf),
labels = c("<−30", "−30 to 0", ">0")
),
levels = c("<−30", "−30 to 0", ">0")
)
)
# Heatmap de contrastes
plot_heat_evapo <- function(region_name, show_legend = FALSE, show_y_labels = TRUE) {
ggplot(filter(all_contrasts, region == region_name),
aes(x = ff_area, y = tipo_sf_label, fill = estimate_cat)) +
geom_tile(color = "white", height = 0.7) +
geom_text(aes(label = sig_label), size = 3, color = "black", family = "serif") +
scale_fill_manual(
values = c("<−30" = "#D6604D", "−30 to 0" = "#F4A582", ">0" = "#92C5DE"),
limits = c("<−30", "−30 to 0", ">0"),
drop = FALSE,
name = bquote(bold(atop(Delta~"ET (PF − SF)", "(mm)")))
)+
ggthemes::theme_few() +
theme(
text = element_text(size = 12, face = "bold", family = "serif"),
axis.text.x = element_blank(),
axis.title = element_blank(),
axis.text.y = if (show_y_labels) element_text(size = 10, face = "plain", family = "serif", color = "black") else element_blank(),
legend.position = if (show_legend) "right" else "none",
legend.title = element_text(size = 10, face = "bold", family = "serif"),
legend.text = element_text(size = 10),
plot.title = element_text(hjust = 0.5, size = 14, face = "bold", family = "serif"),
strip.text = element_text(size = 14, face = "bold", family = "serif"),
plot.margin = margin(2, 2, 2, 2)
) +
labs(title = "")
}
# Combinar gráficos para cada região
panel_CBA_evapo <- plot_heat_evapo("CBA", show_legend = FALSE, show_y_labels = TRUE) /
plot_point_evapo("CBA", show_y = TRUE, show_legend = FALSE, show_y_axes = TRUE)
panel_CBA_evapo <- panel_CBA_evapo + plot_layout(heights = c(0.2, 0.8))
panel_EBA_evapo <- plot_heat_evapo("EBA", show_legend = FALSE, show_y_labels = FALSE) /
plot_point_evapo("EBA", show_y = FALSE, show_legend = FALSE, show_y_axes = FALSE)
panel_EBA_evapo <- panel_EBA_evapo + plot_layout(heights = c(0.2, 0.8))
panel_SBA_evapo <- plot_heat_evapo("SBA", show_legend = TRUE, show_y_labels = FALSE) /
plot_point_evapo("SBA", show_y = FALSE, show_legend = TRUE, show_y_axes = FALSE)
panel_SBA_evapo <- panel_SBA_evapo + plot_layout(heights = c(0.2, 0.8))
# Combinar todos os painéis horizontalmente
final_panel_evapo <- (panel_CBA_evapo | panel_EBA_evapo | panel_SBA_evapo)
# Exibir painel final
final_panel_evapo
# Salvar
ggsave("fig/fixed_fixed_evapo.png",
plot = final_panel_evapo,
bg = "white", dpi = 600, width = 9, height = 5.5)
gc()
# Para cada modelo
em_cba <- emmeans(model_CBA_temp, ~ ff_area | Tipo)
em_eba <- emmeans(model_EBA_temp, ~ ff_area | Tipo)
em_sba <- emmeans(model_SBA_temp, ~ ff_area | Tipo)
em_df_cba <- as.data.frame(emmeans(model_CBA_temp, ~ ff_area * Tipo))
em_df_eba <- as.data.frame(emmeans(model_EBA_temp, ~ ff_area * Tipo))
em_df_sba <- as.data.frame(emmeans(model_SBA_temp, ~ ff_area * Tipo))
em_df_cba$region <- "CBA"
em_df_eba$region <- "EBA"
em_df_sba$region <- "SBA"
# Juntar todos
em_all <- bind_rows(em_df_cba, em_df_eba, em_df_sba)
# Salvar
write_xlsx(em_all, "data_group/fixed_effects_temp.xlsx")
# Função para obter contrasts PF - SF para cada região
get_contrasts <- function(model, region_name) {
em <- emmeans(model, ~ ff_area:Tipo)
contrast_res <- contrast(em, method = "revpairwise", by = "ff_area", adjust = "fdr")
df <- as.data.frame(contrast_res)
df$region <- region_name
return(df)
}
# Obter contrastes para cada região
contrast_CBA_df <- get_contrasts(model_CBA_temp, "CBA")
contrast_EBA_df <- get_contrasts(model_EBA_temp, "EBA")
contrast_SBA_df <- get_contrasts(model_SBA_temp, "SBA")
# Unir os dados
all_contrasts <- bind_rows(contrast_CBA_df, contrast_EBA_df, contrast_SBA_df)
# Manter apenas os contrastes entre PF e SF_* (não entre os SFs entre si)
sf_levels <- c("SF_early", "SF_intermediate", "SF_advanced")
all_contrasts <- all_contrasts %>%
filter((str_detect(contrast, "PF") & str_detect(contrast, "SF_")))
# Extrair variáveis
all_contrasts <- all_contrasts %>%
separate(contrast, into = c("tipo1", "tipo2"), sep = " - ") %>%
# Manter apenas os contrastes entre PF e SF (em qualquer ordem)
filter((tipo1 == "PF" & tipo2 %in% sf_levels) | (tipo2 == "PF" & tipo1 %in% sf_levels)) %>%
mutate(
ff_area = factor(ff_area, levels = unique(ff_area)),
tipo_sf = if_else(tipo1 == "PF", tipo2, tipo1),
tipo_sf = factor(tipo_sf, levels = sf_levels),
estimate = if_else(tipo1 == "PF", estimate, -estimate),  # garantir PF - SF
sig_label = ifelse(p.value < 0.05, "*", "")
)
# Garante que parâmetros estejam em ordem correta
all_contrasts$ff_area <- factor(all_contrasts$ff_area,
levels = c("1-10", "10-20", "20-30", "30-40", "40-50",
"50-60", "60-70", "70-80", "80-90", "90-100"))
# Ajusta ordem dos tipos de vegetação se necessário
all_contrasts$tipo_sf <- factor(all_contrasts$tipo_sf,
levels = c("SF_early", "SF_intermediate", "SF_advanced"))
# Salvar
write_xlsx(all_contrasts, "data_group/contrast_PF_SF_temp.xlsx")
# Plot de pontos
plot_point_temp <- function(region_name, show_y = TRUE, show_x = TRUE, show_legend = FALSE, show_y_axes = TRUE) {
p <- ggplot(filter(em_all, region == region_name)%>%
mutate(
Tipo = factor(Tipo) %>%
fct_relevel("PF", "SF_early", "SF_intermediate", "SF_advanced") %>%
fct_recode(
"PF" = "PF",
"SF early" = "SF_early",
"SF intermediate" = "SF_intermediate",
"SF advanced" = "SF_advanced"
)
),
aes(x = ff_area, y = emmean, color = Tipo, group = Tipo)) +
geom_errorbar(aes(ymin = lower.CL, ymax = upper.CL),
position = position_dodge(width = 0.8), width = 0.6, size = 0.5) +
geom_point(position = position_dodge(width = 0.8), size = 1.5) +
ggthemes::theme_few() +
theme(
text = element_text(size = 12, face = "bold", family = "serif"),
legend.position = if (show_legend) "right" else "none",
legend.title = element_blank(),
legend.background = element_rect(fill = "transparent"),
legend.text = element_text(size = 10),
axis.text = element_text(size = 10, face = "plain", family = "serif", color = "black"),
#axis.text.x = element_blank(),
axis.text.x = element_text(size = 10, angle = 45, hjust = 1, vjust = 1),
axis.text.y = if (show_y_axes) element_text(size = 10) else element_blank(),
axis.title.y = if (show_y) element_text(size = 14, margin = margin(r = -20)) else element_blank(),
axis.title.x = if (show_x) element_text(size = 12) else element_blank(),
strip.text = element_text(size = 14, face = "bold", family = "serif"),
plot.margin = margin(2, 2, 2, 2)
) +
scale_color_manual(values = c("#7F3B08", "#FEE0B6", "#FDB863", "#E08214")) +
scale_y_continuous(limits = c(24, 26.5), breaks = seq(24, 26.5, by = 0.5)) +
#labs(y = if (show_y) "Temperature\nfixed effects (°C·yr⁻¹)" else NULL) +
labs(x = "Fractional cover (%)",
y = if (show_y) expression(bold(atop("Temperature", "fixed effects (°C)"))) else NULL)
return(p)
}
# Atualizar ordem dos fatores e renomear os labels
all_contrasts <- all_contrasts %>%
mutate(
tipo_sf = factor(tipo_sf, levels = c("SF_early", "SF_intermediate", "SF_advanced")),
tipo_sf_label = fct_recode(tipo_sf,
"SF early" = "SF_early",
"SF intermediate" = "SF_intermediate",
"SF advanced" = "SF_advanced")
)
# Criar coluna categórica para estimate
all_contrasts <- all_contrasts %>%
mutate(
estimate_cat = factor(
cut(estimate,
breaks = c(-Inf, -0.3, 0, Inf),
labels = c("<−0.3", "−0.3 to 0", ">0")
),
levels = c("<−0.3", "−0.3 to 0", ">0")
)
)
# Heatmap de contrastes
plot_heat_temp <- function(region_name, show_legend = FALSE, show_y_labels = TRUE) {
ggplot(filter(all_contrasts, region == region_name),
aes(x = ff_area, y = tipo_sf_label, fill = estimate_cat)) +
geom_tile(color = "white", height = 0.7) +
geom_text(aes(label = sig_label), size = 3, color = "black", family = "serif") +
scale_fill_manual(values = c("<−0.3" = "#4393C3", "−0.3 to 0" = "#92C5DE", ">0" = "#D6604D"),
limits = c("<−0.3", "−0.3 to 0", ">0"),
drop = FALSE,
name = bquote(bold(atop(Delta~"LST (PF − SF)", "(°C)")))
)+
ggthemes::theme_few() +
theme(
text = element_text(size = 12, face = "bold", family = "serif"),
axis.text.x = element_blank(),
axis.title = element_blank(),
axis.text.y = if (show_y_labels) element_text(size = 10, face = "plain", family = "serif", color = "black") else element_blank(),
legend.position = if (show_legend) "right" else "none",
legend.title = element_text(size = 10, face = "bold", family = "serif"),
legend.text = element_text(size = 10),
plot.title = element_text(hjust = 0.5, size = 14, face = "bold", family = "serif"),
strip.text = element_text(size = 14, face = "bold", family = "serif"),
plot.margin = margin(2, 2, 2, 2)
) +
labs(title = "")
}
# Combinar gráficos para cada região
panel_CBA_temp <- plot_heat_temp("CBA", show_legend = FALSE, show_y_labels = TRUE) /
plot_point_temp("CBA", show_y = TRUE, show_x = FALSE, show_legend = FALSE, show_y_axes = TRUE)
panel_CBA_temp <- panel_CBA_temp + plot_layout(heights = c(0.2, 0.8))
panel_EBA_temp <- plot_heat_temp("EBA", show_legend = FALSE, show_y_labels = FALSE) /
plot_point_temp("EBA", show_y = FALSE, show_x = TRUE,  show_legend = FALSE, show_y_axes = FALSE)
panel_EBA_temp <- panel_EBA_temp + plot_layout(heights = c(0.2, 0.8))
panel_SBA_temp <- plot_heat_temp("SBA", show_legend = TRUE, show_y_labels = FALSE) /
plot_point_temp("SBA", show_y = FALSE, show_x = FALSE, show_legend = TRUE, show_y_axes = FALSE)
panel_SBA_temp <- panel_SBA_temp + plot_layout(heights = c(0.2, 0.8))
# Combinar todos os painéis horizontalmente
final_panel_temp <- (panel_CBA_temp | panel_EBA_temp | panel_SBA_temp)
# Exibir painel final
final_panel_temp
# Salvar
ggsave("fig/fixed_fixed_temp.png",
plot = final_panel_temp,
bg = "white", dpi = 600, width = 9, height = 5.5)
gc()
p1_point_prec <- final_panel_prec +
scale_x_discrete(expand = c(0.05, 0.05)) +
theme(plot.margin = margin(t = 10, r = 20, b = 5, l = 30))
p1_point_evapo <- final_panel_evapo +
scale_x_discrete(expand = c(0.05, 0.05)) +
theme(plot.margin = margin(t = 5, r = 20, b = 5, l = 30))
p1_point_temp <- final_panel_temp +
scale_x_discrete(expand = c(0.05, 0.05)) +
theme(plot.margin = margin(t = 5, r = 20, b = 10, l = 30))
# Criar painel com espaçamento ajustado
painel_fixed <- ggarrange(
p1_point_prec, p1_point_evapo, p1_point_temp,
ncol = 1, nrow = 3,
labels = c("A", "B", "C"),  # Letras dos subplots
font.label = list(color = "black", face = "bold", size = 14, family = "serif"),
align = "v",                # Alinhamento vertical
heights = c(1, 1, 1)        # Força os plots a terem alturas iguais
)
# Salvar figura final
ggsave("fig/painels/effect_fix_climate_x_fractional_forest.png",
plot = painel_fixed, dpi = 600, width = 10, height = 12, bg = "white")
ggsave("fig/painels/effect_fix_climate_x_fractional_forest.pdf",
plot = painel_fixed, width = 10, height = 12, bg = "white")
