name = expression(bold(atop(Delta~"LST (PF - SF)", "(°C·yr"^{-1}*")"))))+
ggthemes::theme_few() +
theme(
text = element_text(size = 12, face = "bold", family = "serif"),
axis.text.x = element_blank(),
axis.title = element_blank(),
axis.text.y = if (show_y_labels) element_text(size = 10, face = "plain", family = "serif", color = "black") else element_blank(),
legend.position = if (show_legend) "right" else "none",
legend.title = element_text(size = 10, face = "bold", family = "serif"),
legend.text = element_text(size = 10),
plot.title = element_text(hjust = 0.5, size = 14, face = "bold", family = "serif"),
strip.text = element_text(size = 14, face = "bold", family = "serif"),
plot.margin = margin(2, 2, 2, 2)
) +
labs(title = "")
}
# Combinar gráficos para cada região
panel_CBA_temp <- plot_heat_temp("CBA", show_legend = FALSE, show_y_labels = TRUE) /
plot_point_temp("CBA", show_y = TRUE, show_x = FALSE, show_legend = FALSE, show_y_axes = TRUE)
panel_CBA_temp <- panel_CBA_temp + plot_layout(heights = c(0.2, 0.8))
panel_EBA_temp <- plot_heat_temp("EBA", show_legend = FALSE, show_y_labels = FALSE) /
plot_point_temp("EBA", show_y = FALSE, show_x = TRUE,  show_legend = FALSE, show_y_axes = FALSE)
panel_EBA_temp <- panel_EBA_temp + plot_layout(heights = c(0.2, 0.8))
panel_SBA_temp <- plot_heat_temp("SBA", show_legend = TRUE, show_y_labels = FALSE) /
plot_point_temp("SBA", show_y = FALSE, show_x = FALSE, show_legend = TRUE, show_y_axes = FALSE)
panel_SBA_temp <- panel_SBA_temp + plot_layout(heights = c(0.2, 0.8))
# Combinar todos os painéis horizontalmente
final_panel_temp <- (panel_CBA_temp | panel_EBA_temp | panel_SBA_temp)
# Exibir painel final
final_panel_temp
# Salvar
ggsave("fig/fixed_fixed_temp.png",
plot = final_panel_temp,
bg = "white", dpi = 600, width = 9, height = 5.5)
gc()
# Lista de modelos
modelos <- list(CBA = model_CBA_temp, EBA = model_EBA_temp, SBA = model_SBA_temp)
# Função para gerar todos os contrastes PF - SF
get_all_contrasts <- function(model, region_name) {
em <- emmeans(model, ~ ff_area * Tipo)
contrast_res <- contrast(em, method = "revpairwise", adjust = "fdr")
df <- as.data.frame(contrast_res)
df$region <- region_name
return(df)
}
# Aplicar para todas as regiões
all_contrasts_sup <- purrr::map2_dfr(modelos, names(modelos), get_all_contrasts)
str(all_contrasts_sup)
# Extrair contrastes entre PF e SF
sf_levels <- c("SF_beginning", "SF_intermediate", "SF_advanced")
all_contrasts_sup <- all_contrasts_sup %>%
filter(str_detect(contrast, "PF") & str_detect(contrast, "SF_"))
# Extrair informações usando regex
# Regex para capturar (faixa tipo) - (faixa tipo)
extr <- str_match(all_contrasts_sup$contrast,
"\\(([^ ]+) ([^)]+)\\) - \\(([^ ]+) ([^)]+)\\)")
# Adicionar colunas extraídas
all_contrasts_sup <- all_contrasts_sup %>%
mutate(
faixa1 = extr[, 2],
tipo1 = extr[, 3],
faixa2 = extr[, 4],
tipo2 = extr[, 5]
) %>%
filter((tipo1 == "PF" & tipo2 %in% sf_levels) | (tipo2 == "PF" & tipo1 %in% sf_levels)) %>%
mutate(
faixa_PF = if_else(tipo1 == "PF", faixa1, faixa2),
faixa_SF = if_else(tipo1 == "PF", faixa2, faixa1),
tipo_SF  = if_else(tipo1 == "PF", tipo2, tipo1),
estimate = if_else(tipo1 == "PF", estimate, -estimate),  # garantir PF - SF
sig_label = ifelse(p.value < 0.05, "*", "")
)
# Ajustar fatores
faixas_niveis <- c("1-10", "10-20", "20-30", "30-40", "40-50",
"50-60", "60-70", "70-80", "80-90", "90-100")
sf_levels <- c("SF_beginning", "SF_intermediate", "SF_advanced")
all_contrasts_sup <- all_contrasts_sup %>%
mutate(
faixa_PF = factor(faixa_PF, levels = faixas_niveis),
faixa_SF = factor(faixa_SF, levels = faixas_niveis),
tipo_SF  = factor(tipo_SF,  levels = sf_levels)
)
# Classificação mantendo sinal
all_contrasts_sup <- all_contrasts_sup %>%
mutate(
tipo_SF = fct_recode(tipo_SF,
"SF beginning" = "SF_beginning",
"SF intermediate" = "SF_intermediate",
"SF advanced" = "SF_advanced")
) %>%
mutate(
estimate_class = case_when(
estimate < -0.6 ~ "<-0.6",
estimate >= -0.6 & estimate < -0.3 ~ "-0.3 – -0.6",
estimate >= -0.3 & estimate < 0 ~ "0 – -0.3",
estimate >= 0 ~ ">0"
),
estimate_class = factor(estimate_class, levels = c("<-0.6", "-0.3 – -0.6", "0 – -0.3", ">0"))
)
# Plot
heatmap_all_contrasts <- ggplot(all_contrasts_sup,
aes(x = faixa_SF, y = faixa_PF, fill = estimate_class)) +
geom_tile(color = "white") +
geom_text(aes(label = sig_label), color = "red", size = 3, family = "serif") +
scale_fill_manual(values = c(
"<-0.6" = "#B2182B",
"-0.3 – -0.6" = "#D6604D",
"0 – -0.3" = "#F4A582",
">0" = "#92C5DE"
), name = expression(bold(atop(Delta~"LST (PF - SF)", "(°C·yr"^{-1}*")"))))+
facet_grid(tipo_SF ~ region) +
theme_minimal(base_family = "serif") +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
strip.text = element_text(size = 12, face = "bold"),
axis.title = element_blank()
)
heatmap_all_contrasts
# Salvar
ggsave("fig/supplemental_material/contrastes_fixed_efects_temp.png", width = 10, height = 8, dpi = 600, bg = "white")
ggsave("fig/supplemental_material/contrastes_fixed_efects_temp.pdf", width = 10, height = 8, bg = "white")
gc()
# Função para extrair efeitos aleatórios com IC por região
extract_random_effects <- function(model, region_name) {
# Efeitos aleatórios com variância condicional
ran <- ranef(model, condVar = TRUE)
# Extrair efeitos por ano
ran_df <- as.data.frame(ran$Ano)
names(ran_df) <- "effect"
ran_df$ano <- rownames(ran$Ano)
# Intervalos de confiança (erro padrão)
se <- attr(ran$Ano, "postVar")[1, 1, ] |> sqrt()
ran_df <- ran_df %>%
mutate(
se = se,
lower = effect - 1.96 * se,
upper = effect + 1.96 * se,
region = region_name
)
return(ran_df)
}
# Aplicar para os três modelos (substitua pelos seus objetos reais)
random_cba <- extract_random_effects(model_CBA_temp, "CBA")
random_eba <- extract_random_effects(model_EBA_temp, "EBA")
random_sba <- extract_random_effects(model_SBA_temp, "SBA")
# Combinar tudo
random_all <- bind_rows(random_cba, random_eba, random_sba)
# Garantir que o ano seja ordenável
random_all$ano <- as.numeric(as.character(random_all$ano))
# Plot
p1_rand_temp <- ggplot(random_all, aes(x = ano, y = effect)) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray40") +
geom_bar(stat = "identity", position = "dodge", alpha = 0.8, fill = "#E08214") +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.5, color = "black") +
facet_wrap(~region, scales = "free_x") +
scale_x_continuous(breaks = seq(2001, 2021, by = 2)) +
ggthemes::theme_few() +
theme(
text = element_text(size = 12, face = "bold", family = "serif"),
axis.text = element_text(size = 10, face = "plain", family = "serif", color = "black"),
axis.text.x = element_text(angle = 45, hjust = 1),
axis.title = element_text(size = 14),
#strip.text = element_text(face = "bold", size = 13)) +
strip.text = element_blank()) +
labs(
x = "",
y = expression(bold(atop("Temperature", "random effects (°C·yr"^{-1}*")")))
)
p1_rand_temp
ggsave("fig/histogram_random_temp.png", bg = "white", dpi = 600, width = 9, height = 5.5)
# CBA
r2_cba_temp = r2_nakagawa(model_CBA_temp)
r2_cba_temp_cond <- round(r2_cba_temp$R2_conditional, 3)
# EBA
r2_eba_temp = r2_nakagawa(model_EBA_temp)
r2_eba_temp_cond <- round(r2_eba_temp$R2_conditional,3)
# SBA
r2_sba_temp = r2_nakagawa(model_SBA_temp)
r2_sba_temp_cond <- round(r2_sba_temp$R2_conditional, 3)
## CBA
# Obter os valores observados e previstos
observado_cba_temp <- model_cba_temp$Temp
previsto_cba_temp  <- predict(model_CBA_temp)
ccc_result_cba_temp  <- CCC(observado_cba_temp , previsto_cba_temp )
ccc_val_cba_temp <- round(ccc_result_cba_temp$rho.c[, "est"], 3)
## EBA
# Obter os valores observados e previstos
observado_eba_temp <- model_eba_temp$Temp
previsto_eba_temp  <- predict(model_EBA_temp)
ccc_result_eba_temp  <- CCC(observado_eba_temp , previsto_eba_temp )
ccc_val_eba_temp <- round(ccc_result_eba_temp$rho.c[, "est"], 3)
## SBA
# Obter os valores observados e previstos
observado_sba_temp <- model_sba_temp$Temp
previsto_sba_temp  <- predict(model_SBA_temp)
ccc_result_sba_temp  <- CCC(observado_sba_temp , previsto_sba_temp )
ccc_val_sba_temp <- round(ccc_result_sba_temp$rho.c[, "est"], 3)
## CBA
model_cba_temp$predicted <- predict(model_CBA_temp, model_cba_temp)
limite_min <- floor(min(model_cba_temp$Temp, model_cba_temp$predicted, na.rm = TRUE)/ 0.5) * 0.5
limite_max <- ceiling(max(model_cba_temp$Temp, model_cba_temp$predicted, na.rm = TRUE)/ 0.5) * 0.5
cba_pf = model_cba_temp |>
ggplot(aes(Temp,predicted))+
geom_point(size = 2, alpha = .7)+
geom_smooth(method = "lm", se = F, color = "orange")+
theme_minimal()+
theme(text = element_text(size = 14, face = "bold", family = "serif"),
axis.title.y = element_text(margin = margin(r = 10)),
plot.title = element_text(size = 14, face = "bold", family = "serif", hjust = 0.5))+
labs(x = "",
y = "Predicted LST \n (°C·yr⁻¹)",
title = "CBA",
subtitle = paste0("R² = ", r2_cba_temp_cond,
" | CCC = ", ccc_val_cba_temp)) +
theme(plot.subtitle = element_text(size = 14, face = "plain", family = "serif"))
## EBA
model_eba_temp$predicted <- predict(model_EBA_temp, model_eba_temp)
limite_min <- floor(min(model_eba_temp$Temp, model_eba_temp$predicted, na.rm = TRUE)/ 0.5) * 0.5
limite_max <- ceiling(max(model_eba_temp$Temp, model_eba_temp$predicted, na.rm = TRUE)/ 0.5) * 0.5
eba_pf = model_eba_temp |>
ggplot(aes(Temp,predicted))+
geom_point(size = 2, alpha = .7)+
geom_smooth(method = "lm", se = F, color = "orange")+
theme_minimal()+
theme(text = element_text(size = 14, face = "bold", family = "serif"),
axis.title.y = element_text(margin = margin(r = 10)),
plot.title = element_text(size = 14, face = "bold", family = "serif", hjust = 0.5))+
labs(x = "",
y = "",
title = "EBA",
subtitle = paste0("R² = ", r2_eba_temp_cond,
" | CCC = ", ccc_val_eba_temp)) +
theme(plot.subtitle = element_text(size = 14, face = "plain", family = "serif"))
## SBA
model_sba_temp$predicted <- predict(model_SBA_temp, model_sba_temp)
limite_min <- floor(min(model_sba_temp$Temp, model_sba_temp$predicted, na.rm = TRUE)/ 0.5) * 0.5
limite_max <- ceiling(max(model_sba_temp$Temp, model_sba_temp$predicted, na.rm = TRUE)/ 0.5) * 0.5
sba_pf = model_sba_temp |>
ggplot(aes(Temp,predicted))+
geom_point(size = 2, alpha = .7)+
geom_smooth(method = "lm", se = F, color = "orange")+
theme_minimal()+
theme(text = element_text(size = 14, face = "bold", family = "serif"),
axis.title.y = element_text(margin = margin(r = 10)),
plot.title = element_text(size = 14, face = "bold", family = "serif", hjust = 0.5))+
labs(x = "",
y = "",
title = "SBA",
subtitle = paste0("R² = ", r2_sba_temp_cond,
" | CCC = ", ccc_val_sba_temp)) +
theme(plot.subtitle = element_text(size = 14, face = "plain", family = "serif"))
gc()
# Função para incluir escalas iguais nos eixos
ajustar_plot <- function(plot) {
plot +
scale_x_continuous(limits = c(limite_min, limite_max), breaks = seq(limite_min, limite_max, by = 0.5)) +
scale_y_continuous(limits = c(limite_min, limite_max), breaks = seq(limite_min, limite_max, by = 0.5))
}
# Aplicando a função a cada gráfico
cba_pf <- ajustar_plot(cba_pf)
eba_pf <- ajustar_plot(eba_pf)
sba_pf <- ajustar_plot(sba_pf)
# Juntando todos os plots de temp
p3_pred_temp = (cba_pf + eba_pf + sba_pf) +
plot_layout(ncol = 3, nrow = 1, guides = "collect") &
theme(text = element_text(size = 12, face = "bold", family = "serif"),  # Texto geral
axis.text = element_text(size = 10, face = "plain", family = "serif"),  # Texto dos eixos
axis.text.x = element_text(size = 10, angle = 45, hjust = 1, vjust = 1, family = "serif"))
#axis.text.y = element_text(size = 10, family = "serif"))  # Fonte serif no eixo Y
p3_pred_temp
ggsave("fig/supplemental_material/predicted_observed_temp.png", bg = "white", dpi = 600, width = 12, height = 5.5)
gc()
model_cba_all_temp = model_cba_temp
model_cba_all_temp[model_cba_all_temp$ff_area== "1-10",
c("area")]<-1
model_cba_all_temp[model_cba_all_temp$ff_area== "10-20",
c("area")]<-2
model_cba_all_temp[model_cba_all_temp$ff_area== "20-30",
c("area")]<-3
model_cba_all_temp[model_cba_all_temp$ff_area== "30-40",
c("area")]<-4
model_cba_all_temp[model_cba_all_temp$ff_area== "40-50",
c("area")]<-5
model_cba_all_temp[model_cba_all_temp$ff_area== "50-60",
c("area")]<-6
model_cba_all_temp[model_cba_all_temp$ff_area== "60-70",
c("area")]<-7
model_cba_all_temp[model_cba_all_temp$ff_area== "70-80",
c("area")]<-8
model_cba_all_temp[model_cba_all_temp$ff_area== "80-90",
c("area")]<-9
model_cba_all_temp[model_cba_all_temp$ff_area== "90-100",
c("area")]<-10
model_cba_all_temp[model_cba_all_temp$type== 1,
c("vegetation")]<-"PF"
model_cba_all_temp[model_cba_all_temp$type== 2,
c("vegetation")]<-"SF_beginning"
model_cba_all_temp[model_cba_all_temp$type== 3,
c("vegetation")]<-"SF_intermediate"
model_cba_all_temp[model_cba_all_temp$type== 4,
c("vegetation")]<-"SF_advanced"
model_cba_all_temp
# Reordenar os níveis de 'Tipo'
model_cba_all_temp <- model_cba_all_temp %>%
mutate(vegetation = factor(vegetation, levels = c("PF", "SF_beginning", "SF_intermediate", "SF_advanced")))
model_cba_all_temp %>%
ggplot(aes(x = area*10, y = Temp))+
theme_bw()+
geom_point(aes(x = area*10, y = Temp, color = vegetation)) +
geom_line(aes(y = predicted, group = vegetation, color = vegetation), size = 1)+
scale_color_manual(values = c("darkgreen", "#ACD39E", "#5AAE61", "#1B7837"),
name = NULL,
labels = c("PF", "SF beginning", "SF intermediate", "SF advanced")) +
scale_fill_manual(values = c("darkgreen", "#ACD39E", "#5AAE61", "#1B7837"),
name = NULL,
labels = c("PF", "SF beginning", "SF intermediate", "SF advanced")) +
scale_y_continuous(breaks = seq(24, 27, by = 0.5)) +
ggthemes::theme_few() +
facet_wrap(~Ano, nrow = 4, ncol = 6) +
labs(x = "Fractional forest coverage (%)",
y = "Predicted temperature (°C·yr⁻¹) - CBA",
color = "")+
theme(legend.position = "top",
text = element_text(family = "serif"),
axis.title = element_text(size = 16, face = "bold"),
strip.text = element_text(face = "bold", size = 12),
legend.text = element_text(size = 14, face = "bold"),
legend.title = element_text(face = "bold", size = 14),
plot.title = element_text(size = 14, face = "bold", hjust = 0.5),  # Centraliza título
axis.text = element_text(size = 12))
ggsave("fig/supplemental_material/predicted_temp_CBA.png", bg = "white",
dpi = 600, width = 10, height = 8)
model_eba_all_temp = model_eba_temp
model_eba_all_temp[model_eba_all_temp$ff_area== "1-10",
c("area")]<-1
model_eba_all_temp[model_eba_all_temp$ff_area== "10-20",
c("area")]<-2
model_eba_all_temp[model_eba_all_temp$ff_area== "20-30",
c("area")]<-3
model_eba_all_temp[model_eba_all_temp$ff_area== "30-40",
c("area")]<-4
model_eba_all_temp[model_eba_all_temp$ff_area== "40-50",
c("area")]<-5
model_eba_all_temp[model_eba_all_temp$ff_area== "50-60",
c("area")]<-6
model_eba_all_temp[model_eba_all_temp$ff_area== "60-70",
c("area")]<-7
model_eba_all_temp[model_eba_all_temp$ff_area== "70-80",
c("area")]<-8
model_eba_all_temp[model_eba_all_temp$ff_area== "80-90",
c("area")]<-9
model_eba_all_temp[model_eba_all_temp$ff_area== "90-100",
c("area")]<-10
model_eba_all_temp[model_eba_all_temp$type== 1,
c("vegetation")]<-"PF"
model_eba_all_temp[model_eba_all_temp$type== 2,
c("vegetation")]<-"SF_beginning"
model_eba_all_temp[model_eba_all_temp$type== 3,
c("vegetation")]<-"SF_intermediate"
model_eba_all_temp[model_eba_all_temp$type== 4,
c("vegetation")]<-"SF_advanced"
model_eba_all_temp
# Reordenar os níveis de 'Tipo'
model_eba_all_temp <- model_eba_all_temp %>%
mutate(vegetation = factor(vegetation, levels = c("PF", "SF_beginning", "SF_intermediate", "SF_advanced")))
model_eba_all_temp %>%
ggplot(aes(x = area*10, y = Temp))+
theme_bw()+
#ggthemes::theme_few()+
geom_point(aes(x = area*10, y = Temp, color = vegetation)) +
geom_line(aes(y = predicted, group = vegetation, color = vegetation), size = 1)+
scale_color_manual(values = c("darkgreen", "#ACD39E", "#5AAE61", "#1B7837"),
name = NULL,
labels = c("PF", "SF beginning", "SF intermediate", "SF advanced")) +
scale_fill_manual(values = c("darkgreen", "#ACD39E", "#5AAE61", "#1B7837"),
name = NULL,
labels = c("PF", "SF beginning", "SF intermediate", "SF advanced")) +
scale_y_continuous(breaks = seq(23, 27, by = 0.5)) +
ggthemes::theme_few() +
facet_wrap(~Ano, nrow = 4, ncol = 6) +
labs(x = "Fractional forest coverage (%)",
y = "Predicted temperature (°C·yr⁻¹) - EBA",
color = "") +
theme(legend.position = "top",
text = element_text(family = "serif"),
axis.title = element_text(size = 16, face = "bold"),
strip.text = element_text(face = "bold", size = 12),
legend.text = element_text(size = 14, face = "bold"),
legend.title = element_text(face = "bold", size = 14),
plot.title = element_text(size = 14, face = "bold", hjust = 0.5),  # Centraliza título
axis.text = element_text(size = 12))
ggsave("fig/supplemental_material/predicted_temp_EBA.png", bg = "white",
dpi = 600, width = 10, height = 8)
model_sba_all_temp = model_sba_temp
model_sba_all_temp[model_sba_all_temp$ff_area== "1-10",
c("area")]<-1
model_sba_all_temp[model_sba_all_temp$ff_area== "10-20",
c("area")]<-2
model_sba_all_temp[model_sba_all_temp$ff_area== "20-30",
c("area")]<-3
model_sba_all_temp[model_sba_all_temp$ff_area== "30-40",
c("area")]<-4
model_sba_all_temp[model_sba_all_temp$ff_area== "40-50",
c("area")]<-5
model_sba_all_temp[model_sba_all_temp$ff_area== "50-60",
c("area")]<-6
model_sba_all_temp[model_sba_all_temp$ff_area== "60-70",
c("area")]<-7
model_sba_all_temp[model_sba_all_temp$ff_area== "70-80",
c("area")]<-8
model_sba_all_temp[model_sba_all_temp$ff_area== "80-90",
c("area")]<-9
model_sba_all_temp[model_sba_all_temp$ff_area== "90-100",
c("area")]<-10
model_sba_all_temp[model_sba_all_temp$type== 1,
c("vegetation")]<-"PF"
model_sba_all_temp[model_sba_all_temp$type== 2,
c("vegetation")]<-"SF_beginning"
model_sba_all_temp[model_sba_all_temp$type== 3,
c("vegetation")]<-"SF_intermediate"
model_sba_all_temp[model_sba_all_temp$type== 4,
c("vegetation")]<-"SF_advanced"
model_sba_all_temp
# Reordenar os níveis de 'Tipo'
model_sba_all_temp <- model_sba_all_temp %>%
mutate(vegetation = factor(vegetation, levels = c("PF", "SF_beginning", "SF_intermediate", "SF_advanced")))
model_sba_all_temp %>%
ggplot(aes(x = area*10, y = Temp))+
theme_bw()+
#ggthemes::theme_few()+
geom_point(aes(x = area*10, y = Temp, color = vegetation)) +
geom_line(aes(y = predicted, group = vegetation, color = vegetation), size = 1)+
scale_color_manual(values = c("darkgreen", "#ACD39E", "#5AAE61", "#1B7837"),
name = NULL,
labels = c("PF", "SF beginning", "SF intermediate", "SF advanced")) +
scale_fill_manual(values = c("darkgreen", "#ACD39E", "#5AAE61", "#1B7837"),
name = NULL,
labels = c("PF", "SF beginning", "SF intermediate", "SF advanced")) +
scale_y_continuous(breaks = seq(23, 27, by = 0.5)) +
ggthemes::theme_few() +
facet_wrap(~Ano, nrow = 4, ncol = 6) +
labs(x = "Fractional forest coverage (%)",
y = "Predicted temperature (°C·yr⁻¹) - SBA",
color = "") +
theme(legend.position = "top",
text = element_text(family = "serif"),
axis.title = element_text(size = 16, face = "bold"),
strip.text = element_text(face = "bold", size = 12),
legend.text = element_text(size = 14, face = "bold"),
legend.title = element_text(face = "bold", size = 14),
plot.title = element_text(size = 14, face = "bold", hjust = 0.5),  # Centraliza título
axis.text = element_text(size = 12))
ggsave("fig/supplemental_material/predicted_temp_SBA.png", bg = "white",
dpi = 600, width = 10, height = 8)
# Fixed Effects
# Ajuste das margens
p1_point_prec <- final_panel_prec +
scale_x_discrete(expand = c(0.05, 0.05)) +
theme(plot.margin = margin(t = 10, r = 20, b = 5, l = 30))
p1_point_evapo <- final_panel_evapo +
scale_x_discrete(expand = c(0.05, 0.05)) +
theme(plot.margin = margin(t = 5, r = 20, b = 5, l = 30))
p1_point_temp <- final_panel_temp +
scale_x_discrete(expand = c(0.05, 0.05)) +
theme(plot.margin = margin(t = 5, r = 20, b = 10, l = 30))
# Criar painel com espaçamento ajustado
painel_fixed <- ggarrange(
p1_point_prec, p1_point_evapo, p1_point_temp,
ncol = 1, nrow = 3,
labels = c("A", "B", "C"),  # Letras dos subplots
font.label = list(color = "black", face = "bold", size = 14, family = "serif"),
align = "v",                # Alinhamento vertical
heights = c(1, 1, 1)        # Força os plots a terem alturas iguais
)
# Salvar figura final
ggsave("fig/painels/effect_fix_climate_x_fractional_forest.png",
plot = painel_fixed, dpi = 600, width = 10, height = 12, bg = "white")
ggsave("fig/painels/effect_fix_climate_x_fractional_forest.pdf",
plot = painel_fixed, width = 10, height = 12, bg = "white")
painel_fixed
# Random Effects
# Ajuste das margens
p1_rand_prec <- p1_rand_prec +
scale_x_discrete(expand = c(0.05, 0.05)) +
theme(plot.margin = margin(t = 10, r = 10, b = 5, l = 20))
p2_rand_evapo <- p1_rand_evapo +
scale_x_discrete(expand = c(0.05, 0.05)) +
theme(plot.margin = margin(t = 5, r = 10, b = 5, l = 20))
p3_rand_temp <- p1_rand_temp +
#scale_x_discrete(expand = c(0.05, 0.05)) +
theme(plot.margin = margin(t = 5, r = 10, b = 10, l = 20))
# Criar painel com espaçamento ajustado
painel_random <- ggarrange(
p1_rand_prec, p2_rand_evapo, p3_rand_temp,
ncol = 1, nrow = 3,
labels = c("A", "B", "C"),  # Letras dos subplots
font.label = list(color = "black", face = "bold", size = 14, family = "serif"),
align = "v",                # Alinhamento vertical
heights = c(1, 1, 1)        # Força os plots a terem alturas iguais
)
painel_random
# Salvar figura final
ggsave("fig/painels/effect_rand_pf_sf.png",
dpi = 600, width = 10, height = 12, bg = "white")
ggsave("fig/painels/effect_rand_pf_sf.pdf",
width = 10, height = 12, bg = "white")
#```{r,eval = FALSE, echo = TRUE}
# Transformar colunas de fração de volta para formato original
all_lulc_long_50 <- melt(all_lulc_fil_50,
id.vars = c("Lon", "Lat", "Prec", "Evapo", "Temp", "Region", "Ano", "Idade_SF"),
variable.name = "Tipo",
value.name = "frac_area")
