faixa_PF = if_else(tipo1 == "PF", faixa1, faixa2),
faixa_SF = if_else(tipo1 == "PF", faixa2, faixa1),
tipo_SF  = if_else(tipo1 == "PF", tipo2, tipo1),
estimate = if_else(tipo1 == "PF", estimate, -estimate),  # garantir PF - SF
sig_label = ifelse(p.value < 0.05, "*", "")
)
# Ajustar fatores
faixas_niveis <- c("1-10", "10-20", "20-30", "30-40", "40-50",
"50-60", "60-70", "70-80", "80-90", "90-100")
sf_levels <- c("SF_early", "SF_intermediate", "SF_advanced")
all_contrasts_sup <- all_contrasts_sup %>%
mutate(
faixa_PF = factor(faixa_PF, levels = faixas_niveis),
faixa_SF = factor(faixa_SF, levels = faixas_niveis),
tipo_SF  = factor(tipo_SF,  levels = sf_levels)
)
# Classificação mantendo sinal
all_contrasts_sup <- all_contrasts_sup %>%
mutate(
tipo_SF = fct_recode(tipo_SF,
"SF early" = "SF_early",
"SF intermediate" = "SF_intermediate",
"SF advanced" = "SF_advanced")
) %>%
mutate(
estimate_class = case_when(
estimate < -100 ~ "<-100",
estimate >= -100 & estimate < 0 ~ "-100–0",
estimate >= 0 & estimate < 100 ~ "0–100",
estimate >= 100 ~ ">100"
),
estimate_class = factor(estimate_class, levels = c("<-100", "-100–0", "0–100", ">100"))
)
# Plot
heatmap_all_contrasts <- ggplot(all_contrasts_sup,
aes(x = faixa_SF, y = faixa_PF, fill = estimate_class)) +
geom_tile(color = "white") +
geom_text(aes(label = sig_label), color = "black", size = 3, family = "serif") +
scale_fill_manual(values = c(
"<-100" = "#D6604D",
"-100–0" = "#F4A582",
"0–100" = "#92C5DE",
">100" = "#4393C3"
), name = expression(bold(atop(Delta~"ET (PF - SF)", "(mm·yr"^{-1}*")"))))+
facet_grid(tipo_SF ~ region) +
theme_minimal(base_family = "serif") +
theme(
text = element_text(size = 12, face = "bold", family = "serif"),
axis.text.x = element_text(angle = 45, hjust = 1),
strip.text = element_text(size = 12, face = "bold"),
axis.text = element_text(size = 10, face = "plain", family = "serif", color = "black")
) +
labs(x = "SF fractional cover (%)",
y = "PF fractional cover (%)")
heatmap_all_contrasts
# Salvar
ggsave("fig/supplemental_material/contrastes_fixed_efects_evapo.png", width = 10, height = 8, dpi = 600, bg = "white")
ggsave("fig/supplemental_material/contrastes_fixed_efects_evapo.pdf", width = 10, height = 8, bg = "white")
gc()
# Função para extrair efeitos aleatórios com IC por região
extract_random_effects <- function(model, region_name) {
# Efeitos aleatórios com variância condicional
ran <- ranef(model, condVar = TRUE)
# Extrair efeitos por ano
ran_df <- as.data.frame(ran$Ano)
names(ran_df) <- "effect"
ran_df$ano <- rownames(ran$Ano)
# Intervalos de confiança (erro padrão)
se <- attr(ran$Ano, "postVar")[1, 1, ] |> sqrt()
ran_df <- ran_df %>%
mutate(
se = se,
lower = effect - 1.96 * se,
upper = effect + 1.96 * se,
region = region_name
)
return(ran_df)
}
# Aplicar para os três modelos (substitua pelos seus objetos reais)
random_cba <- extract_random_effects(model_CBA_evapo, "CBA")
random_eba <- extract_random_effects(model_EBA_evapo, "EBA")
random_sba <- extract_random_effects(model_SBA_evapo, "SBA")
# Combinar tudo
random_all <- bind_rows(random_cba, random_eba, random_sba)
# Garantir que o ano seja ordenável
random_all$ano <- as.numeric(as.character(random_all$ano))
# Salvar
write_xlsx(random_all, "data_group/random_effects_evapo.xlsx")
# Plot
p1_rand_evapo <- ggplot(random_all, aes(x = ano, y = effect)) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray40") +
geom_bar(stat = "identity", position = "dodge", alpha = 0.8, fill = "green1") +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.5, color = "black") +
facet_wrap(~region, scales = "free_x") +
scale_x_continuous(breaks = seq(2001, 2021, by = 2)) +
ggthemes::theme_few() +
theme(
text = element_text(size = 12, face = "bold", family = "serif"),
axis.text = element_text(size = 10, face = "plain", family = "serif", color = "black"),
#axis.text.x = element_text(angle = 45, hjust = 1),
axis.text.x = element_blank(),
axis.title = element_text(size = 14),
#strip.text = element_text(face = "bold", size = 13)) +
strip.text = element_blank()) +
labs(
x = "",
y = expression(bold(atop("Evapotranspiration", "random effects (mm·yr"^{-1}*")")))
)
p1_rand_evapo
ggsave("fig/histogram_random_evapo.png", bg = "white", dpi = 600, width = 9, height = 5.5)
# CBA
r2_cba_evapo = r2_nakagawa(model_CBA_evapo)
r2_cba_evapo_cond <- round(r2_cba_evapo$R2_conditional, 3)
# EBA
r2_eba_evapo = r2_nakagawa(model_EBA_evapo)
r2_eba_evapo_cond <- round(r2_eba_evapo$R2_conditional, 3)
# SBA
r2_sba_evapo = r2_nakagawa(model_SBA_evapo)
r2_sba_evapo_cond <- round(r2_sba_evapo$R2_conditional, 3)
## CBA
# Obter os valores observados e previstos
observado_cba_evapo <- model_cba_evapo$Evapo
previsto_cba_evapo  <- predict(model_CBA_evapo)
ccc_result_cba_evapo  <- CCC(observado_cba_evapo , previsto_cba_evapo )
ccc_val_cba_evapo <- round(ccc_result_cba_evapo$rho.c[, "est"], 3)
## EBA
# Obter os valores observados e previstos
observado_eba_evapo <- model_eba_evapo$Evapo
previsto_eba_evapo  <- predict(model_EBA_evapo)
ccc_result_eba_evapo  <- CCC(observado_eba_evapo , previsto_eba_evapo )
ccc_val_eba_evapo <- round(ccc_result_eba_evapo$rho.c[, "est"], 3)
## SBA
# Obter os valores observados e previstos
observado_sba_evapo <- model_sba_evapo$Evapo
previsto_sba_evapo  <- predict(model_SBA_evapo)
ccc_result_sba_evapo  <- CCC(observado_sba_evapo , previsto_sba_evapo )
ccc_val_sba_evapo <- round(ccc_result_sba_evapo$rho.c[, "est"], 3)
## CBA
model_cba_evapo$predicted <- predict(model_CBA_evapo, model_cba_evapo)
limite_min <- floor(min(model_cba_evapo$Evapo, model_cba_evapo$predicted, na.rm = TRUE)/ 100) * 100
limite_max <- ceiling(max(model_cba_evapo$Evapo, model_cba_evapo$predicted, na.rm = TRUE)/ 100) * 100
cba_pf = model_cba_evapo |>
ggplot(aes(Evapo,predicted))+
geom_point(size = 2, alpha = .7)+
geom_smooth(method = "lm", se = F, color = "orange")+
theme_minimal()+
theme(legend.position = "top",
legend.text = element_text(size = 16),
text = element_text(size = 16, face = "bold", family = "serif"),
axis.title.y = element_text(margin = margin(r = 10)),
plot.title = element_text(size = 14, face = "bold", family = "serif", hjust = 0.5))+
labs(x = "Observed ET \n (mm·yr⁻¹)",
y = "Predicted ET \n (mm·yr⁻¹)",
title = "",
subtitle = paste("R² = ", r2_cba_evapo_cond,
" | CCC = ", ccc_val_cba_evapo)) +
theme(plot.subtitle = element_text(size = 14, face = "plain", family = "serif"))
## EBA
model_eba_evapo$predicted <- predict(model_EBA_evapo, model_eba_evapo)
limite_min <- floor(min(model_eba_evapo$Evapo, model_eba_evapo$predicted, na.rm = TRUE)/ 100) * 100
limite_max <- ceiling(max(model_eba_evapo$Evapo, model_eba_evapo$predicted, na.rm = TRUE)/ 100) * 100
eba_pf = model_eba_evapo |>
ggplot(aes(Evapo,predicted))+
geom_point(size = 2, alpha = .7)+
geom_smooth(method = "lm", se = F, color = "orange")+
theme_minimal()+
theme(text = element_text(size = 14, face = "bold", family = "serif"),
axis.title.y = element_text(margin = margin(r = 10)),
plot.title = element_text(size = 14, face = "bold", family = "serif", hjust = 0.5))+
labs(x = "Observed ET \n (mm·yr⁻¹)",
y = "",
title = "",
subtitle = paste("R² = ", r2_eba_evapo_cond,
" | CCC = ", ccc_val_eba_evapo)) +
theme(plot.subtitle = element_text(size = 14, face = "plain", family = "serif"))
## SBA
model_sba_evapo$predicted <- predict(model_SBA_evapo, model_sba_evapo)
limite_min <- floor(min(model_sba_evapo$Evapo, model_sba_evapo$predicted, na.rm = TRUE)/ 100) * 100
limite_max <- ceiling(max(model_sba_evapo$Evapo, model_sba_evapo$predicted, na.rm = TRUE)/ 100) * 100
sba_pf = model_sba_evapo |>
ggplot(aes(Evapo,predicted))+
geom_point(size = 2, alpha = .7)+
geom_smooth(method = "lm", se = F, color = "orange")+
theme_minimal()+
theme(text = element_text(size = 14, face = "bold", family = "serif"),
axis.title.y = element_text(margin = margin(r = 10)),
plot.title = element_text(size = 14, face = "bold", family = "serif", hjust = 0.5))+
labs(x = "Observed ET \n (mm·yr⁻¹)",
y = "",
title = "",
subtitle = paste("R² = ", r2_sba_evapo_cond,
" | CCC = ", ccc_val_sba_evapo)) +
theme(plot.subtitle = element_text(size = 14, face = "plain", family = "serif"))
# Função para incluir escalas iguais nos eixos
ajustar_plot <- function(plot) {
plot +
scale_x_continuous(limits = c(limite_min, limite_max), breaks = seq(limite_min, limite_max, by = 100)) +
scale_y_continuous(limits = c(limite_min, limite_max), breaks = seq(limite_min, limite_max, by = 100))
}
# Aplicando a função a cada gráfico
cba_pf <- ajustar_plot(cba_pf)
eba_pf <- ajustar_plot(eba_pf)
sba_pf <- ajustar_plot(sba_pf)
# Juntando todos os plots de evapo
p2_pred_evapo = (cba_pf + eba_pf + sba_pf) +
plot_layout(ncol = 3, nrow = 1, guides = "collect") &
theme(text = element_text(size = 12, face = "bold", family = "serif"),  # Texto geral
axis.text = element_text(size = 10, face = "plain", family = "serif"),  # Texto dos eixos
axis.text.x = element_text(size = 10, angle = 45, hjust = 1, vjust = 1, family = "serif"))
#axis.text.y = element_text(size = 10, family = "serif"))  # Fonte serif no eixo Y
p2_pred_evapo
ggsave("fig/supplemental_material/predicted_observed_evapo.png", bg = "white", dpi = 600, width = 12, height = 5.5)
# Juntando os dataframes
model_cba_all_evapo = model_cba_evapo
model_cba_all_evapo[model_cba_all_evapo$ff_area== "1-10",
c("area")]<-1
model_cba_all_evapo[model_cba_all_evapo$ff_area== "10-20",
c("area")]<-2
model_cba_all_evapo[model_cba_all_evapo$ff_area== "20-30",
c("area")]<-3
model_cba_all_evapo[model_cba_all_evapo$ff_area== "30-40",
c("area")]<-4
model_cba_all_evapo[model_cba_all_evapo$ff_area== "40-50",
c("area")]<-5
model_cba_all_evapo[model_cba_all_evapo$ff_area== "50-60",
c("area")]<-6
model_cba_all_evapo[model_cba_all_evapo$ff_area== "60-70",
c("area")]<-7
model_cba_all_evapo[model_cba_all_evapo$ff_area== "70-80",
c("area")]<-8
model_cba_all_evapo[model_cba_all_evapo$ff_area== "80-90",
c("area")]<-9
model_cba_all_evapo[model_cba_all_evapo$ff_area== "90-100",
c("area")]<-10
model_cba_all_evapo[model_cba_all_evapo$type== 1,
c("vegetation")]<-"Primary forest"
model_cba_all_evapo[model_cba_all_evapo$type== 2,
c("vegetation")]<-"Secondary forest"
model_cba_all_evapo[model_cba_all_evapo$type== 1,
c("vegetation")]<-"PF"
model_cba_all_evapo[model_cba_all_evapo$type== 2,
c("vegetation")]<-"SF_early"
model_cba_all_evapo[model_cba_all_evapo$type== 3,
c("vegetation")]<-"SF_intermediate"
model_cba_all_evapo[model_cba_all_evapo$type== 4,
c("vegetation")]<-"SF_advanced"
model_cba_all_evapo
# Reordenar os níveis de 'Tipo'
model_cba_all_evapo <- model_cba_all_evapo %>%
mutate(vegetation = factor(vegetation, levels = c("PF", "SF_early", "SF_intermediate", "SF_advanced")))
model_cba_all_evapo %>%
ggplot(aes(x = area*10, y = Evapo))+
theme_bw()+
geom_point(aes(x = area*10, y = Evapo, color = vegetation)) +
geom_line(aes(y = predicted, group = vegetation, color = vegetation), size = 1)+
scale_color_manual(values = c("darkgreen", "#ACD39E", "#5AAE61", "#1B7837"),
name = NULL,
labels = c("PF", "SF early", "SF intermediate", "SF advanced")) +
scale_fill_manual(values = c("darkgreen", "#ACD39E", "#5AAE61", "#1B7837"),
name = NULL,
labels = c("PF", "SF early", "SF intermediate", "SF advanced")) +
scale_y_continuous(breaks = seq(1200, 1600, by = 100)) +
ggthemes::theme_few() +
facet_wrap(~Ano, nrow = 4, ncol = 6) +
labs(x = "Fractional forest coverage (%)",
y = "Predicted evapotranspiration (mm·yr⁻¹) - CBA",
color = "") +
theme(legend.position = "top",
text = element_text(family = "serif"),
axis.title = element_text(size = 16, face = "bold"),
strip.text = element_text(face = "bold", size = 12),
legend.text = element_text(size = 14, face = "bold"),  # Tamanho do texto da legenda
legend.title = element_text(face = "bold", size = 14),
plot.title = element_text(size = 14, face = "bold", hjust = 0.5),  # Centraliza título
axis.text = element_text(size = 12))
ggsave("fig/supplemental_material/predicted_evapo_CBA.png", bg = "white", dpi = 600, width = 10, height = 8)
model_eba_all_evapo = model_eba_evapo
model_eba_all_evapo[model_eba_all_evapo$ff_area== "1-10",
c("area")]<-1
model_eba_all_evapo[model_eba_all_evapo$ff_area== "10-20",
c("area")]<-2
model_eba_all_evapo[model_eba_all_evapo$ff_area== "20-30",
c("area")]<-3
model_eba_all_evapo[model_eba_all_evapo$ff_area== "30-40",
c("area")]<-4
model_eba_all_evapo[model_eba_all_evapo$ff_area== "40-50",
c("area")]<-5
model_eba_all_evapo[model_eba_all_evapo$ff_area== "50-60",
c("area")]<-6
model_eba_all_evapo[model_eba_all_evapo$ff_area== "60-70",
c("area")]<-7
model_eba_all_evapo[model_eba_all_evapo$ff_area== "70-80",
c("area")]<-8
model_eba_all_evapo[model_eba_all_evapo$ff_area== "80-90",
c("area")]<-9
model_eba_all_evapo[model_eba_all_evapo$ff_area== "90-100",
c("area")]<-10
model_eba_all_evapo[model_eba_all_evapo$type== 1,
c("vegetation")]<-"PF"
model_eba_all_evapo[model_eba_all_evapo$type== 2,
c("vegetation")]<-"SF_early"
model_eba_all_evapo[model_eba_all_evapo$type== 3,
c("vegetation")]<-"SF_intermediate"
model_eba_all_evapo[model_eba_all_evapo$type== 4,
c("vegetation")]<-"SF_advanced"
model_eba_all_evapo
# Reordenar os níveis de 'Tipo'
model_eba_all_evapo <- model_eba_all_evapo %>%
mutate(vegetation = factor(vegetation, levels = c("PF", "SF_early", "SF_intermediate", "SF_advanced")))
model_eba_all_evapo %>%
ggplot(aes(x = area*10, y = Evapo))+
theme_bw()+
geom_point(aes(x = area*10, y = Evapo, color = vegetation)) +
geom_line(aes(y = predicted, group = vegetation, color = vegetation), size = 1)+
scale_color_manual(values = c("darkgreen", "#ACD39E", "#5AAE61", "#1B7837"),
name = NULL,
labels = c("PF", "SF early", "SF intermediate", "SF advanced")) +
scale_fill_manual(values = c("darkgreen", "#ACD39E", "#5AAE61", "#1B7837"),
name = NULL,
labels = c("PF", "SF early", "SF intermediate", "SF advanced")) +
scale_y_continuous(breaks = seq(1300, 1700, by = 100)) +
ggthemes::theme_few() +
facet_wrap(~Ano, nrow = 4, ncol = 6) +
labs(x = "Fractional forest coverage (%)",
y = "Predicted evapotranspiration (mm·yr⁻¹) - EBA",
color = "") +
theme(legend.position = "top",
text = element_text(family = "serif"),
axis.title = element_text(size = 16, face = "bold"),
strip.text = element_text(face = "bold", size = 12),
legend.text = element_text(size = 14, face = "bold"),  # Tamanho do texto da legenda
legend.title = element_text(face = "bold", size = 14),
plot.title = element_text(size = 14, face = "bold", hjust = 0.5),  # Centraliza título
axis.text = element_text(size = 12))
ggsave("fig/supplemental_material/predicted_evapo_EBA.png", bg = "white",
dpi = 600, width = 10, height = 8)
model_sba_all_evapo = model_sba_evapo
model_sba_all_evapo[model_sba_all_evapo$ff_area== "1-10",
c("area")]<-1
model_sba_all_evapo[model_sba_all_evapo$ff_area== "10-20",
c("area")]<-2
model_sba_all_evapo[model_sba_all_evapo$ff_area== "20-30",
c("area")]<-3
model_sba_all_evapo[model_sba_all_evapo$ff_area== "30-40",
c("area")]<-4
model_sba_all_evapo[model_sba_all_evapo$ff_area== "40-50",
c("area")]<-5
model_sba_all_evapo[model_sba_all_evapo$ff_area== "50-60",
c("area")]<-6
model_sba_all_evapo[model_sba_all_evapo$ff_area== "60-70",
c("area")]<-7
model_sba_all_evapo[model_sba_all_evapo$ff_area== "70-80",
c("area")]<-8
model_sba_all_evapo[model_sba_all_evapo$ff_area== "80-90",
c("area")]<-9
model_sba_all_evapo[model_sba_all_evapo$ff_area== "90-100",
c("area")]<-10
model_sba_all_evapo[model_sba_all_evapo$type== 1,
c("vegetation")]<-"PF"
model_sba_all_evapo[model_sba_all_evapo$type== 2,
c("vegetation")]<-"SF_early"
model_sba_all_evapo[model_sba_all_evapo$type== 3,
c("vegetation")]<-"SF_intermediate"
model_sba_all_evapo[model_sba_all_evapo$type== 4,
c("vegetation")]<-"SF_advanced"
model_sba_all_evapo
# Reordenar os níveis de 'Tipo'
model_sba_all_evapo <- model_sba_all_evapo %>%
mutate(vegetation = factor(vegetation, levels = c("PF", "SF_early", "SF_intermediate", "SF_advanced")))
model_sba_all_evapo %>%
ggplot(aes(x = area*10, y = Evapo))+
theme_bw()+
geom_point(aes(x = area*10, y = Evapo, color = vegetation)) +
geom_line(aes(y = predicted, group = vegetation, color = vegetation), size = 1)+
scale_color_manual(values = c("darkgreen", "#ACD39E", "#5AAE61", "#1B7837"),
name = NULL,
labels = c("PF", "SF early", "SF intermediate", "SF advanced")) +
scale_fill_manual(values = c("darkgreen", "#ACD39E", "#5AAE61", "#1B7837"),
name = NULL,
labels = c("PF", "SF early", "SF intermediate", "SF advanced")) +
scale_y_continuous(breaks = seq(1000, 1600, by = 150)) +
ggthemes::theme_few() +
facet_wrap(~Ano, nrow = 4, ncol = 6) +
labs(x = "Fractional forest coverage (%)",
y = "Predicted evapotranspiration (mm·yr⁻¹) - SBA",
color = "") +
theme(legend.position = "top",
text = element_text(family = "serif"),
axis.title = element_text(size = 16, face = "bold"),
strip.text = element_text(face = "bold", size = 12),
legend.text = element_text(size = 14, face = "bold"),  # Tamanho do texto da legenda
legend.title = element_text(face = "bold", size = 14),
plot.title = element_text(size = 14, face = "bold", hjust = 0.5),  # Centraliza título
axis.text = element_text(size = 12))
ggsave("fig/supplemental_material/predicted_evapo_SBA.png", bg = "white",
dpi = 600, width = 10, height = 8)
all_pf_sf_temp_model = read_xlsx("data_group/plan_data_group_temp.xlsx")
## CBA
model_cba_temp = all_pf_sf_temp_model %>%
filter(region == "CBA")
model_cba_temp$type = as.factor(model_cba_temp$type)
## EBA
model_eba_temp = all_pf_sf_temp_model %>%
filter(region == "EBA")
model_eba_temp$type = as.factor(model_eba_temp$type)
## SBA
model_sba_temp = all_pf_sf_temp_model %>%
filter(region == "SBA")
model_sba_temp$type = as.factor(model_sba_temp$type)
# Modelo com interação frac_area e classe florestal
## CBA
model_CBA_temp <- lmerTest::lmer(Temp ~ ff_area*Tipo +
(1 | Ano), data = model_cba_temp)
#EBA
model_EBA_temp = lmerTest::lmer(Temp ~ ff_area*Tipo +
(1|Ano), data = model_eba_temp)
##SBA
model_SBA_temp = lmerTest::lmer(Temp ~ ff_area*Tipo +
(1|Ano), data = model_sba_temp)
#
summary(model_CBA_temp)
summary(model_EBA_temp)
summary(model_SBA_temp)
#
BIC(model_CBA_temp)
BIC(model_EBA_temp)
BIC(model_SBA_temp)
#
predict(model_CBA_temp)
predict(model_EBA_temp)
predict(model_SBA_temp)
gc()
# Obtain the fixed effects
cba_temp_fix = fixef(model_CBA_temp)
cba_temp_fix = as.data.frame(cba_temp_fix)
eba_temp_fix = fixef(model_EBA_temp)
eba_temp_fix = as.data.frame(eba_temp_fix)
sba_temp_fix = fixef(model_SBA_temp)
sba_temp_fix = as.data.frame(sba_temp_fix)
gc()
###### Framework ########
parameters = c("sig1","sigma", "1-10","10-20","20-30","30-40","40-50","50-60","60-70","70-80","80-90","90-100", "1-10","1-10","1-10","10-20","20-30","30-40","40-50","50-60","60-70","70-80","80-90","90-100", "10-20","20-30","30-40","40-50","50-60","60-70","70-80","80-90","90-100", "10-20","20-30","30-40","40-50","50-60","60-70","70-80","80-90","90-100")
parameters = as.data.frame(parameters)
# CBA
# confint - indica incerteza apenas sobre a média estimada da resposta, não sobre obs. individuais
ic_cba_temp = confint(model_CBA_temp)
ic_cba_temp = as.data.frame(ic_cba_temp)
ic_cba_temp$parameters = parameters$parameters
ic_cba_temp = ic_cba_temp |>
filter(!parameters %in% c("sig1","sigma"))
ic_cba_temp$fixed_effect = cba_temp_fix$cba_temp_fix
ic_cba_temp$region = "CBA"
# EBA
ic_eba_temp = confint(model_EBA_temp)
ic_eba_temp = as.data.frame(ic_eba_temp)
ic_eba_temp$parameters = parameters$parameters
ic_eba_temp = ic_eba_temp |>
filter(!parameters %in% c("sig1","sigma"))
ic_eba_temp$fixed_effect = eba_temp_fix$eba_temp_fix
ic_eba_temp$region = "EBA"
# SBA
ic_sba_temp = confint(model_SBA_temp)
ic_sba_temp = as.data.frame(ic_sba_temp)
ic_sba_temp$parameters = parameters$parameters
ic_sba_temp = ic_sba_temp |>
filter(!parameters %in% c("sig1","sigma"))
ic_sba_temp$fixed_effect = sba_temp_fix$sba_temp_fix
ic_sba_temp$region = "SBA"
#
all_forest_temp = rbind(ic_cba_temp,ic_eba_temp,ic_sba_temp)
colnames(all_forest_temp) = c("low","high","parameters","fixed_effect","region")
all_forest_temp$region = as.factor(all_forest_temp$region)
# Cria a nova coluna 'rownames' a partir dos nomes das linhas
all_forest_temp$rownames <- rownames(all_forest_temp)
# Extrai o tipo de vegetação a partir dos nomes das linhas
all_forest_temp$vegetation <- case_when(
str_detect(all_forest_temp$rownames, "TipoSF_advanced") ~ "SF_advanced",
str_detect(all_forest_temp$rownames, "TipoSF_early") ~ "SF_early",
str_detect(all_forest_temp$rownames, "TipoSF_intermediate") ~ "SF_intermediate",
TRUE ~ "PF"  # Assumimos que se não é SF, então é Primária (PF)
)
gc()
library(ggplot2)
library(RColorBrewer)
library(writexl)
library(extrafont)
library(readxl)
library(tidyverse)
library(dplyr)
library(scales)
library(grid)
library(gridExtra)
library(gtable)
library(ggpubr)
library(car)
library(dunn.test)
library(data.table)
library(rstatix)
library(tidyr)
library(purrr)
library(patchwork)
library(reshape2)
library(ggthemes)
library(sf)
library(scales)
# Lendo a planilha
all_lulc_50_final <- fread("/media/amazonia/hd2/lais/GitHub/paper_climate_forest_regeneration/data_group/plan_all_lulc_final.csv")
all_lulc_50_fil <- all_lulc_50_final %>%
filter(Tipo %in% c("SF", "PF"))
rm(all_lulc_50_final)
gc()
View(all_lulc_50_fil)
